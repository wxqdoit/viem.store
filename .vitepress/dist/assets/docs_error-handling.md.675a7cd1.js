import{_ as s,c as n,o as a,Q as p}from"./chunks/framework.a5052463.js";const m=JSON.parse('{"title":"错误处理","description":"错误处理","frontmatter":{"head":[["meta",{"property":"og:title","content":"错误处理"}],["meta",{"name":"description","content":"错误处理"}],["meta",{"property":"og:description","content":"错误处理"}]]},"headers":[],"relativePath":"docs/error-handling.md","filePath":"docs/error-handling.md"}'),o={name:"docs/error-handling.md"},l=p(`<h1 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h1><p>viem中的每个模块都会导出一个附带的错误类型，你可以使用它来强类型化<code>catch</code>语句。</p><p>这些类型来自<code>&lt;Module&gt;ErrorType</code>，例如<code>getBlockNumber</code>方法导出一个<code>GetBlockNumberErrorType</code>类型。</p><p>不幸的是，<a href="https://github.com/microsoft/TypeScript/issues/13219" target="_blank" rel="noreferrer">TypeScript没有针对类型异常的抽象</a>，因此最实际和基本的方法是在catch语句中明确地进行错误类型转换。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-SDwG1" id="tab-FH8dUum" checked="checked"><label for="tab-FH8dUum">example.ts</label><input type="radio" name="group-SDwG1" id="tab-PuF-HJ8"><label for="tab-PuF-HJ8">client.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line highlighted"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> GetBlockNumberErrorType } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { publicClient } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">blockNumber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getBlockNumber</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetBlockNumberErrorType</span></span>
<span class="line"><span style="color:#E1E4E8;">  error.name</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//    ^? (property) name: &quot;Error&quot; | &quot;ChainDisconnectedError&quot; | &quot;HttpRequestError&quot; | &quot;InternalRpcError&quot; | &quot;InvalidInputRpcError&quot; | &quot;InvalidParamsRpcError&quot; | &quot;InvalidRequestRpcError&quot; | &quot;JsonRpcVersionUnsupportedError&quot; | ... 16 more ... | &quot;WebSocketRequestError&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (error.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;InternalRpcError&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    error.code</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    ^? (property) code: -32603</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (error.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;HttpRequestError&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    error.headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    ^? (property) headers: Headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    error.status</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    ^? (property) status: number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line highlighted"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> GetBlockNumberErrorType } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { publicClient } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">blockNumber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getBlockNumber</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetBlockNumberErrorType</span></span>
<span class="line"><span style="color:#24292E;">  error.name</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//    ^? (property) name: &quot;Error&quot; | &quot;ChainDisconnectedError&quot; | &quot;HttpRequestError&quot; | &quot;InternalRpcError&quot; | &quot;InvalidInputRpcError&quot; | &quot;InvalidParamsRpcError&quot; | &quot;InvalidRequestRpcError&quot; | &quot;JsonRpcVersionUnsupportedError&quot; | ... 16 more ... | &quot;WebSocketRequestError&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (error.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;InternalRpcError&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    error.code</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    ^? (property) code: -32603</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (error.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;HttpRequestError&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    error.headers</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    ^? (property) headers: Headers</span></span>
<span class="line"><span style="color:#24292E;">    error.status</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    ^? (property) status: number</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createPublicClient, http } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { mainnet } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem/chains&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">publicClient</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPublicClient</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  chain: mainnet,</span></span>
<span class="line"><span style="color:#E1E4E8;">  transport: </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createPublicClient, http } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { mainnet } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem/chains&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">publicClient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPublicClient</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  chain: mainnet,</span></span>
<span class="line"><span style="color:#24292E;">  transport: </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div></div></div>`,5),e=[l];function r(t,c,E,y,i,d){return a(),n("div",null,e)}const h=s(o,[["render",r]]);export{m as __pageData,h as default};
