import{_ as s,c as n,o as a,Q as p}from"./chunks/framework.a5052463.js";const F=JSON.parse('{"title":"常见问题","description":"常见问题","frontmatter":{"head":[["meta",{"property":"og:title","content":"FAQ"}],["meta",{"name":"description","content":"常见问题"}],["meta",{"property":"og:description","content":"常见问题"}]]},"headers":[],"relativePath":"docs/faq.md","filePath":"docs/faq.md"}'),l={name:"docs/faq.md"},o=p(`<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><p>关于viem的常见问题。</p><p><strong>TL;DR（太长了；不用读）：viem尝试避免在现有的系统基础上创建不必要的抽象层.</strong></p><p>如果你发现下面的常见问题不完整，请随时添加到本文档中。</p><nav class="table-of-contents"><ul><li><a href="#为什么使用-wallet-和-account-来代替-signer">为什么使用 &quot;Wallet&quot; 和 &quot;Account&quot; 来代替 &quot;Signer&quot;</a></li><li><a href="#为什么带有完全命名输入的合约函数args被表示为未命名元组类型而不是对象类型">为什么带有完全命名输入的合约函数args被表示为未命名元组类型而不是对象类型？</a></li><li><a href="#为什么合约函数返回值的类型是数组而不是对象">为什么合约函数返回值的类型是数组而不是对象</a></li><li><a href="#为什么钱包客户端不支持公共操作">为什么钱包客户端不支持公共操作？</a></li></ul></nav><h2 id="为什么使用-wallet-和-account-来代替-signer" tabindex="-1">为什么使用 &quot;Wallet&quot; 和 &quot;Account&quot; 来代替 &quot;Signer&quot; <a class="header-anchor" href="#为什么使用-wallet-和-account-来代替-signer" aria-label="Permalink to &quot;为什么使用 &quot;Wallet&quot; 和 &quot;Account&quot; 来代替 &quot;Signer&quot;&quot;">​</a></h2><p>viem尝试更加接近<a href="https://ethereum.org/en/glossary/" target="_blank" rel="noreferrer">Ethereum.org 上的术语</a> &quot;Wallet&quot; 和 &quot;Account&quot;。而 &quot;Signer&quot; 这个词是改编自ethers.js.</p><p>所以在进行深入讨论之前先弄清楚这些术语：</p><ul><li>Wallet: 持有账户的应用程序或接口。</li><li>Account: 表示地址、余额、随机数以及可选存储和代码的对象。</li><li>Private Key: 证明帐户的所有权，并可以签署消息和交易。</li></ul><p>在viem的上下文中，一个钱包客户端是持有一个账户的接口，而账户可能持有也可能不持有私钥。</p><p>在viem中有两种类型的账户：</p><ul><li>本地账户： 可以<strong>同步和直接地</strong>签名消息以及用私钥进行交易。签名是有保障的。</li><li>JSON-RPC 账户： 可以通过JSON-RPC从目标钱包<strong>直接请求</strong>签名和交易（例如：浏览器扩展钱包或者WalletConnect）。目标钱包持有账户和私钥，签名没有保障（目标钱包可能不允许该帐户操作，或者钱包可能拒绝请求）。</li></ul><p>我们不要使用&quot;Signer&quot;这个术语，是因为本地签名和通过JSON-RPC签名动作之间存在明显的差异。</p><h2 id="为什么带有完全命名输入的合约函数args被表示为未命名元组类型而不是对象类型" tabindex="-1">为什么带有完全命名输入的合约函数<code>args</code>被表示为未命名元组类型而不是对象类型？ <a class="header-anchor" href="#为什么带有完全命名输入的合约函数args被表示为未命名元组类型而不是对象类型" aria-label="Permalink to &quot;为什么带有完全命名输入的合约函数\`args\`被表示为未命名元组类型而不是对象类型？&quot;">​</a></h2><p>看看这个例子！假设合约中有以下函数：</p><div class="language-sol vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sol</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">function transferFrom(address sender, address recipient, uint256 amount) returns (bool)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function transferFrom(address sender, address recipient, uint256 amount) returns (bool)</span></span></code></pre></div><p>所有输入均已命名（<code>sender</code>、<code>recipient</code>和<code>amount</code>），因此可能会尝试将参数表示为以下TypeScript类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">sender</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">recipient</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">amount</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bigint</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">sender</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">recipient</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">amount</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bigint</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这稍微改善了开发人员的体验，因为现在可以在编辑器中看到参数的名称。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createWalletClient, parseAbi } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createWalletClient</span><span style="color:#E1E4E8;">(…)</span></span>
<span class="line"><span style="color:#E1E4E8;">client.</span><span style="color:#B392F0;">writeContract</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  address: </span><span style="color:#9ECBFF;">&#39;0x…&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  abi: </span><span style="color:#B392F0;">parseAbi</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;function transferFrom(address sender, address recipient, uint256 amount) returns (bool)&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]),</span></span>
<span class="line"><span style="color:#E1E4E8;">  functionName: </span><span style="color:#9ECBFF;">&#39;transferFrom&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  args: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    sender: </span><span style="color:#9ECBFF;">&#39;0x…&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    recipient: </span><span style="color:#9ECBFF;">&#39;0x…&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    amount: </span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createWalletClient, parseAbi } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createWalletClient</span><span style="color:#24292E;">(…)</span></span>
<span class="line"><span style="color:#24292E;">client.</span><span style="color:#6F42C1;">writeContract</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  address: </span><span style="color:#032F62;">&#39;0x…&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  abi: </span><span style="color:#6F42C1;">parseAbi</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;function transferFrom(address sender, address recipient, uint256 amount) returns (bool)&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  ]),</span></span>
<span class="line"><span style="color:#24292E;">  functionName: </span><span style="color:#032F62;">&#39;transferFrom&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  args: {</span></span>
<span class="line"><span style="color:#24292E;">    sender: </span><span style="color:#032F62;">&#39;0x…&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    recipient: </span><span style="color:#032F62;">&#39;0x…&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    amount: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>但是这只在所有输入都有名称情况下才有效（某些编译器会从输入中删除名称）。 如果参数没有命名，则必须使用数组：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">client.</span><span style="color:#B392F0;">writeContract</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  address: </span><span style="color:#9ECBFF;">&#39;0x…&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  abi: </span><span style="color:#B392F0;">parseAbi</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;function transferFrom(address, address, uint256) returns (bool)&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]),</span></span>
<span class="line"><span style="color:#E1E4E8;">  functionName: </span><span style="color:#9ECBFF;">&#39;transferFrom&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  args: [</span><span style="color:#9ECBFF;">&#39;0x…&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;0x…&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100</span><span style="color:#F97583;">n</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">client.</span><span style="color:#6F42C1;">writeContract</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  address: </span><span style="color:#032F62;">&#39;0x…&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  abi: </span><span style="color:#6F42C1;">parseAbi</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;function transferFrom(address, address, uint256) returns (bool)&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  ]),</span></span>
<span class="line"><span style="color:#24292E;">  functionName: </span><span style="color:#032F62;">&#39;transferFrom&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  args: [</span><span style="color:#032F62;">&#39;0x…&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;0x…&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">n</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>当函数有重写的时候，可能会变得更加复杂： This can get even more complicated when a function has overrides:</p><div class="language-sol vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sol</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">function safeTransferFrom(address, address, uint256)</span></span>
<span class="line"><span style="color:#e1e4e8;">function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function safeTransferFrom(address, address, uint256)</span></span>
<span class="line"><span style="color:#24292e;">function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)</span></span></code></pre></div><p>在这种情况下，重载参数的类型开始彼此不同：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">bigint</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">from</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">to</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">tokenId</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bigint</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">bigint</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#E36209;">from</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#E36209;">to</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#E36209;">tokenId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bigint</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#E36209;">data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>如果你想在这你的代码中切换这两种重载方式，你需要完全更改类型，而不是在末尾添加参数或删除某个位置的参数（对象不会强制执行类型级别的排序，所以你可以安妮想要的吮吸填写参数。这也意味着viem还需要在运行时内部验证顺序，从而增加一些额外的开销。相当于自动按顺序转为数组）</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">client.writeContract({</span></span>
<span class="line"><span style="color:#E1E4E8;">  address: &#39;0x…&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  abi: parseAbi([</span></span>
<span class="line"><span style="color:#E1E4E8;">    &#39;function safeTransferFrom(address, address, uint256)&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">    &#39;function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]),</span></span>
<span class="line"><span style="color:#E1E4E8;">  functionName: &#39;safeTransferFrom&#39;,</span></span>
<span class="line"><span style="color:#FDAEB7;">- args: [&#39;0x…&#39;, &#39;0x…&#39;, 100n],</span></span>
<span class="line"><span style="color:#85E89D;">+ args: {</span></span>
<span class="line"><span style="color:#85E89D;">+   from: &#39;0x…&#39;,</span></span>
<span class="line"><span style="color:#85E89D;">+   to: &#39;0x…&#39;,</span></span>
<span class="line"><span style="color:#85E89D;">+   tokenId: 100n,</span></span>
<span class="line"><span style="color:#85E89D;">+   data: &#39;0x…&#39;,</span></span>
<span class="line"><span style="color:#85E89D;">+ },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">client.writeContract({</span></span>
<span class="line"><span style="color:#24292E;">  address: &#39;0x…&#39;,</span></span>
<span class="line"><span style="color:#24292E;">  abi: parseAbi([</span></span>
<span class="line"><span style="color:#24292E;">    &#39;function safeTransferFrom(address, address, uint256)&#39;,</span></span>
<span class="line"><span style="color:#24292E;">    &#39;function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)&#39;,</span></span>
<span class="line"><span style="color:#24292E;">  ]),</span></span>
<span class="line"><span style="color:#24292E;">  functionName: &#39;safeTransferFrom&#39;,</span></span>
<span class="line"><span style="color:#B31D28;">- args: [&#39;0x…&#39;, &#39;0x…&#39;, 100n],</span></span>
<span class="line"><span style="color:#22863A;">+ args: {</span></span>
<span class="line"><span style="color:#22863A;">+   from: &#39;0x…&#39;,</span></span>
<span class="line"><span style="color:#22863A;">+   to: &#39;0x…&#39;,</span></span>
<span class="line"><span style="color:#22863A;">+   tokenId: 100n,</span></span>
<span class="line"><span style="color:#22863A;">+   data: &#39;0x…&#39;,</span></span>
<span class="line"><span style="color:#22863A;">+ },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>虽然重载很少出现，但是遇到这种操作就足够<a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" target="_blank" rel="noreferrer">惊人</a>了，那么表示args的最好的办法是什么？ 它们是在合约层面上定位的，所以在viem中用这种方式来表示也是有意义的。</p><p>不过，对开发者来说，并不是失去一切！ TypeScript 中的数组类型可以附加名称：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">tokenId</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">bigint</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">tokenId</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">bigint</span><span style="color:#24292E;">]</span></span></code></pre></div><p>当你使用自动补全的时候，这些名称会在编辑器中显示出来，所以你也可以得到很好的开发体验。不幸的是，TypeScript目前不支持动态命名元组，但我们正在密切关注<a href="https://github.com/microsoft/TypeScript/issues/44939" target="_blank" rel="noreferrer">此问题</a>，一旦实现，我们将添加它到viem中。 与此同时，请坚持住！</p><h2 id="为什么合约函数返回值的类型是数组而不是对象" tabindex="-1">为什么合约函数返回值的类型是数组而不是对象 <a class="header-anchor" href="#为什么合约函数返回值的类型是数组而不是对象" aria-label="Permalink to &quot;为什么合约函数返回值的类型是数组而不是对象&quot;">​</a></h2><p>假设您的ABI如下所示：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    inputs: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;latestRoundData&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    outputs: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&quot;roundId&quot;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&quot;uint80&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&quot;answer&quot;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&quot;int256&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&quot;startedAt&quot;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&quot;uint256&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&quot;updatedAt&quot;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&quot;uint256&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&quot;answeredInRound&quot;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&quot;uint80&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    stateMutability: </span><span style="color:#9ECBFF;">&quot;view&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: </span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    inputs: [],</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;latestRoundData&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    outputs: [</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&quot;roundId&quot;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&quot;uint80&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&quot;answer&quot;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&quot;int256&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&quot;startedAt&quot;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&quot;uint256&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&quot;updatedAt&quot;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&quot;uint256&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&quot;answeredInRound&quot;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&quot;uint80&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    stateMutability: </span><span style="color:#032F62;">&quot;view&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    type: </span><span style="color:#032F62;">&quot;function&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>你可能会很困扰为什么下面不返回一个对象</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createPublicClient, parseAbi } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPublicClient</span><span style="color:#E1E4E8;">(…)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">readContract</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  address: </span><span style="color:#9ECBFF;">&#39;0x…&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  abi: […], </span><span style="color:#6A737D;">// abi from above</span></span>
<span class="line"><span style="color:#E1E4E8;">  functionName: </span><span style="color:#9ECBFF;">&#39;latestRoundData&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">res</span></span>
<span class="line"><span style="color:#6A737D;">// ^? const res: [bigint, bigint, bigint, bigint, bigint]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createPublicClient, parseAbi } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPublicClient</span><span style="color:#24292E;">(…)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">readContract</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  address: </span><span style="color:#032F62;">&#39;0x…&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  abi: […], </span><span style="color:#6A737D;">// abi from above</span></span>
<span class="line"><span style="color:#24292E;">  functionName: </span><span style="color:#032F62;">&#39;latestRoundData&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">res</span></span>
<span class="line"><span style="color:#6A737D;">// ^? const res: [bigint, bigint, bigint, bigint, bigint]</span></span></code></pre></div><p>意料之中的情况，<code>&quot;latestRoundData&quot;</code> <code>outputs</code>是数组类型，所以你也会得到一个返回值为数组的解码值，viem只是将显式类型元组映射为对象</p><p>为什么 viem 遵循这种方法？ 以下是具有两种不同返回类型的“latestRoundData”的合约函数定义：</p><div class="language-sol vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sol</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">function latestRoundData() external view</span></span>
<span class="line"><span style="color:#e1e4e8;">  returns (</span></span>
<span class="line"><span style="color:#e1e4e8;">    uint80 roundId,</span></span>
<span class="line"><span style="color:#e1e4e8;">    int256 answer,</span></span>
<span class="line"><span style="color:#e1e4e8;">    uint256 startedAt,</span></span>
<span class="line"><span style="color:#e1e4e8;">    uint256 updatedAt,</span></span>
<span class="line"><span style="color:#e1e4e8;">    uint80 answeredInRound</span></span>
<span class="line"><span style="color:#e1e4e8;">  );</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">struct Data {</span></span>
<span class="line"><span style="color:#e1e4e8;">  uint80 roundId;</span></span>
<span class="line"><span style="color:#e1e4e8;">  uint256 answer;</span></span>
<span class="line"><span style="color:#e1e4e8;">  uint256 startedAt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  uint256 updatedAt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  uint80 answeredInRound</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">function latestRoundData() external view returns (Data data);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function latestRoundData() external view</span></span>
<span class="line"><span style="color:#24292e;">  returns (</span></span>
<span class="line"><span style="color:#24292e;">    uint80 roundId,</span></span>
<span class="line"><span style="color:#24292e;">    int256 answer,</span></span>
<span class="line"><span style="color:#24292e;">    uint256 startedAt,</span></span>
<span class="line"><span style="color:#24292e;">    uint256 updatedAt,</span></span>
<span class="line"><span style="color:#24292e;">    uint80 answeredInRound</span></span>
<span class="line"><span style="color:#24292e;">  );</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">struct Data {</span></span>
<span class="line"><span style="color:#24292e;">  uint80 roundId;</span></span>
<span class="line"><span style="color:#24292e;">  uint256 answer;</span></span>
<span class="line"><span style="color:#24292e;">  uint256 startedAt;</span></span>
<span class="line"><span style="color:#24292e;">  uint256 updatedAt;</span></span>
<span class="line"><span style="color:#24292e;">  uint80 answeredInRound</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">function latestRoundData() external view returns (Data data);</span></span></code></pre></div><p>第一个函数返回五个参数的集合，所以viem将其映射成为一个数组，我们不将它转为对象的原因是因为在对结构进行解码时，会变得很不明确。如何确定“返回”元组（第一个函数）和“结构”元组（第二个函数）之间的区别。</p><p>另一个原因时人们可能想它是一个数组类型（因为它是一组返回值），其他的库，像是ethers，它通过返回混合数组/对象类型来缓解这种情况，但这种类型在JavaScript中不可序列化，并且 viem 更喜欢不尝试“破解”JavaScript 类型。</p><h2 id="为什么钱包客户端不支持公共操作" tabindex="-1">为什么钱包客户端不支持公共操作？ <a class="header-anchor" href="#为什么钱包客户端不支持公共操作" aria-label="Permalink to &quot;为什么钱包客户端不支持公共操作？&quot;">​</a></h2><p>钱包客户端不支持公共操作，因为钱包提供商（注入的<code>window.ethereum</code>、WalletConnect v2等）可能不提供大多数“节点”/“公共”RPC方法，例如<code>eth_call</code>、<code>eth_newFilter</code>、 <code>eth_getLogs</code> 等。这是因为钱包提供商正常运行不需要这些方法。 例如，钱包提供商可能只支持“eth_sendTransaction”和“eth_sign”，而不支持其他任何内容。</p>`,44),e=[o];function t(c,r,i,E,y,d){return a(),n("div",null,e)}const g=s(l,[["render",t]]);export{F as __pageData,g as default};
