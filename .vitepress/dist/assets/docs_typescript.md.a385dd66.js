import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.0fcaa977.js";const h=JSON.parse('{"title":"TypeScript","description":"TypeScript support for viem.","frontmatter":{"head":[["meta",{"property":"og:title","content":"TypeScript"}],["meta",{"name":"description","content":"TypeScript support for viem."}],["meta",{"property":"og:description","content":"TypeScript support for viem."}]]},"headers":[],"relativePath":"docs/typescript.md","filePath":"docs/typescript.md"}'),e={name:"docs/typescript.md"},p=l(`<h1 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h1><p>viem is designed to be as type-safe as possible! Things to keep in mind:</p><ul><li>Types currently require using TypeScript v5.0.4 or greater.</li><li>Changes to types in this repository are considered non-breaking and are usually released as patch semver changes (otherwise every type enhancement would be a major version!).</li><li>It is highly recommended that you lock your <code>viem</code> package version to a specific patch release and upgrade with the expectation that types may be fixed or upgraded between any release.</li><li>The non-type-related public API of <code>viem</code> still follows semver very strictly.</li></ul><p>To ensure everything works correctly, make sure that your <code>tsconfig.json</code> has <a href="https://www.typescriptlang.org/tsconfig#strict" target="_blank" rel="noreferrer"><code>strict</code></a> mode set to <code>true</code>:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;strict&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="type-inference" tabindex="-1">Type Inference <a class="header-anchor" href="#type-inference" aria-label="Permalink to &quot;Type Inference&quot;">​</a></h2><p>viem can infer types based on <a href="https://docs.soliditylang.org/en/v0.8.15/abi-spec.html#json" target="_blank" rel="noreferrer">ABI</a> and <a href="https://eips.ethereum.org/EIPS/eip-712" target="_blank" rel="noreferrer">EIP-712</a> Typed Data definitions (powered by <a href="https://abitype.dev" target="_blank" rel="noreferrer">ABIType</a>), giving you full end-to-end type-safety from your contracts to your frontend and incredible developer experience (e.g. autocomplete ABI function names and catch misspellings, strongly-typed ABI function arguments, etc.).</p><p>For this to work, you must either add <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions" target="_blank" rel="noreferrer">const assertions</a> to specific configuration parameters (more info on those below) or define them inline. For example, <a href="/docs/contract/readContract.html"><code>readContract</code></a>&#39;s <code>abi</code> configuration parameter:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">readContract</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  abi: […], </span><span style="color:#6A737D;">// &lt;--- defined inline</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">readContract</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  abi: […], </span><span style="color:#6A737D;">// &lt;--- defined inline</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">abi</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> […] </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// &lt;--- const assertion</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">readContract</span><span style="color:#E1E4E8;">({ abi })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">abi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> […] </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">const</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// &lt;--- const assertion</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">readContract</span><span style="color:#24292E;">({ abi })</span></span></code></pre></div><p>If type inference isn&#39;t working, it&#39;s likely you forgot to add a <code>const</code> assertion or define the configuration parameter inline.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Unfortunately <a href="https://github.com/microsoft/TypeScript/issues/32063" target="_blank" rel="noreferrer">TypeScript doesn&#39;t support importing JSON as const</a>. Check out <a href="https://wagmi.sh/cli" target="_blank" rel="noreferrer"><code>@wagmi/cli</code></a> to help with this! It can automatically fetch ABIs from Etherscan, resolve ABIs from your Foundry/Hardhat projects, and much more.</p></div><h3 id="contract-abis" tabindex="-1">Contract ABIs <a class="header-anchor" href="#contract-abis" aria-label="Permalink to &quot;Contract ABIs&quot;">​</a></h3><p>The following actions and utilities support type inference when you add a const assertion to <code>abi</code> or define <code>abi</code> inline:</p><h4 id="actions" tabindex="-1">Actions <a class="header-anchor" href="#actions" aria-label="Permalink to &quot;Actions&quot;">​</a></h4><ul><li><a href="/docs/actions/public/createEventFilter.html"><code>createEventFilter</code></a></li><li><a href="/docs/actions/public/watchEvent.html"><code>watchEvent</code></a></li><li><a href="/docs/contract/createContractEventFilter.html"><code>createContractEventFilter</code></a></li><li><a href="/docs/contract/deployContract.html"><code>deployContract</code></a></li><li><a href="/docs/contract/estimateContractGas.html"><code>estimateContractGas</code></a></li><li><a href="/docs/contract/multicall.html"><code>multicall</code></a></li><li><a href="/docs/contract/readContract.html"><code>readContract</code></a></li><li><a href="/docs/contract/simulateContract.html"><code>simulateContract</code></a></li><li><a href="/docs/contract/writeContract.html"><code>writeContract</code></a></li><li><a href="/docs/contract/watchContractEvent.html"><code>watchContractEvent</code></a></li></ul><h4 id="utilities" tabindex="-1">Utilities <a class="header-anchor" href="#utilities" aria-label="Permalink to &quot;Utilities&quot;">​</a></h4><ul><li><a href="/docs/contract/decodeEventLog.html"><code>decodeEventLog</code></a></li><li><a href="/docs/contract/decodeFunctionResult.html"><code>decodeFunctionResult</code></a></li><li><a href="/docs/contract/encodeDeployData.html"><code>encodeDeployData</code></a></li><li><a href="/docs/contract/encodeErrorResult.html"><code>encodeErrorResult</code></a></li><li><a href="/docs/contract/encodeEventTopics.html"><code>encodeEventTopics</code></a></li><li><a href="/docs/contract/encodeFunctionData.html"><code>encodeFunctionData</code></a></li><li><a href="/docs/contract/encodeFunctionResult.html"><code>encodeFunctionResult</code></a></li><li><a href="/docs/abi/getAbiItem.html"><code>getAbiItem</code></a></li></ul><p>For example, <code>readContract</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">readContract</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//  ^? const data: bigint | undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">  address: </span><span style="color:#9ECBFF;">&#39;0xecb504d39723b0be0e3a9aa33d646642d1051ee1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  abi: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;balanceOf&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      stateMutability: </span><span style="color:#9ECBFF;">&#39;view&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      inputs: [{ name: </span><span style="color:#9ECBFF;">&#39;account&#39;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&#39;address&#39;</span><span style="color:#E1E4E8;"> }],</span></span>
<span class="line"><span style="color:#E1E4E8;">      outputs: [{ type: </span><span style="color:#9ECBFF;">&#39;uint256&#39;</span><span style="color:#E1E4E8;"> }],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;totalSupply&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      stateMutability: </span><span style="color:#9ECBFF;">&#39;view&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      inputs: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">      outputs: [{ type: </span><span style="color:#9ECBFF;">&#39;uint256&#39;</span><span style="color:#E1E4E8;"> }],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;transfer&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      stateMutability: </span><span style="color:#9ECBFF;">&#39;nonpayable&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      inputs: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        { name: </span><span style="color:#9ECBFF;">&#39;recipient&#39;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&#39;address&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        { name: </span><span style="color:#9ECBFF;">&#39;tokenId&#39;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&#39;uint256&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      outputs: [{ type: </span><span style="color:#9ECBFF;">&#39;bool&#39;</span><span style="color:#E1E4E8;"> }],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  functionName: </span><span style="color:#9ECBFF;">&#39;balanceOf&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ^? (property) functionName?: &quot;balanceOf&quot; | &quot;totalSupply&quot; | undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Notice how &quot;transfer&quot; is not included since it is not a &quot;read&quot; function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  args: [</span><span style="color:#9ECBFF;">&#39;0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ^? (property) args?: readonly [\`0x\${string}\`] | undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">readContract</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//  ^? const data: bigint | undefined</span></span>
<span class="line"><span style="color:#24292E;">  address: </span><span style="color:#032F62;">&#39;0xecb504d39723b0be0e3a9aa33d646642d1051ee1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  abi: [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;balanceOf&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      type: </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      stateMutability: </span><span style="color:#032F62;">&#39;view&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      inputs: [{ name: </span><span style="color:#032F62;">&#39;account&#39;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&#39;address&#39;</span><span style="color:#24292E;"> }],</span></span>
<span class="line"><span style="color:#24292E;">      outputs: [{ type: </span><span style="color:#032F62;">&#39;uint256&#39;</span><span style="color:#24292E;"> }],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;totalSupply&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      type: </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      stateMutability: </span><span style="color:#032F62;">&#39;view&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      inputs: [],</span></span>
<span class="line"><span style="color:#24292E;">      outputs: [{ type: </span><span style="color:#032F62;">&#39;uint256&#39;</span><span style="color:#24292E;"> }],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;transfer&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      type: </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      stateMutability: </span><span style="color:#032F62;">&#39;nonpayable&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      inputs: [</span></span>
<span class="line"><span style="color:#24292E;">        { name: </span><span style="color:#032F62;">&#39;recipient&#39;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&#39;address&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">        { name: </span><span style="color:#032F62;">&#39;tokenId&#39;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&#39;uint256&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      outputs: [{ type: </span><span style="color:#032F62;">&#39;bool&#39;</span><span style="color:#24292E;"> }],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  functionName: </span><span style="color:#032F62;">&#39;balanceOf&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ^? (property) functionName?: &quot;balanceOf&quot; | &quot;totalSupply&quot; | undefined</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Notice how &quot;transfer&quot; is not included since it is not a &quot;read&quot; function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  args: [</span><span style="color:#032F62;">&#39;0x27a69ffba1e939ddcfecc8c7e0f967b872bac65c&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ^? (property) args?: readonly [\`0x\${string}\`] | undefined</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="eip-712-typed-data" tabindex="-1">EIP-712 Typed Data <a class="header-anchor" href="#eip-712-typed-data" aria-label="Permalink to &quot;EIP-712 Typed Data&quot;">​</a></h3><p>Adding a const assertion to <code>types</code> or defining <code>types</code> inline adds type inference to <a href="/docs/actions/wallet/signTypedData.html"><code>signTypedData</code></a>&#39;s <code>value</code> configuration parameter:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  domain: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;Ether Mail&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    version: </span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    chainId: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    verifyingContract: </span><span style="color:#9ECBFF;">&#39;0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  types: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Person: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&#39;wallet&#39;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&#39;address&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    Mail: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&#39;from&#39;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&#39;Person&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&#39;to&#39;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&#39;Person&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      { name: </span><span style="color:#9ECBFF;">&#39;contents&#39;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  value: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ^? (parameter) value?: { name: string; wallet: \`0x\${string}\` } | {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//     from: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//         name: string;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//         wallet: \`0x\${string}\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//     };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//     to: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//         name: string;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//         wallet: \`0x\${string}\`;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//     };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//     contents: string;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// } | undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">    from: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;Cow&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      wallet: </span><span style="color:#9ECBFF;">&#39;0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    to: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name: </span><span style="color:#9ECBFF;">&#39;Bob&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      wallet: </span><span style="color:#9ECBFF;">&#39;0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    contents: </span><span style="color:#9ECBFF;">&#39;Hello, Bob!&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  domain: {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;Ether Mail&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    version: </span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    chainId: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    verifyingContract: </span><span style="color:#032F62;">&#39;0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  types: {</span></span>
<span class="line"><span style="color:#24292E;">    Person: [</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&#39;wallet&#39;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&#39;address&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    Mail: [</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&#39;from&#39;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&#39;Person&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&#39;to&#39;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&#39;Person&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">      { name: </span><span style="color:#032F62;">&#39;contents&#39;</span><span style="color:#24292E;">, type: </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  value: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ^? (parameter) value?: { name: string; wallet: \`0x\${string}\` } | {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     from: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//         name: string;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//         wallet: \`0x\${string}\`;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     to: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//         name: string;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//         wallet: \`0x\${string}\`;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     contents: string;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// } | undefined</span></span>
<span class="line"><span style="color:#24292E;">    from: {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;Cow&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      wallet: </span><span style="color:#032F62;">&#39;0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    to: {</span></span>
<span class="line"><span style="color:#24292E;">      name: </span><span style="color:#032F62;">&#39;Bob&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      wallet: </span><span style="color:#032F62;">&#39;0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    contents: </span><span style="color:#032F62;">&#39;Hello, Bob!&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="other" tabindex="-1">Other <a class="header-anchor" href="#other" aria-label="Permalink to &quot;Other&quot;">​</a></h3><p>The following utilities support type inference when you use const assertions or define arguments inline:</p><ul><li><a href="/docs/abi/decodeAbiParameters.html"><code>decodeAbiParameters</code></a></li><li><a href="/docs/abi/encodeAbiParameters.html"><code>encodeAbiParameters</code></a></li><li><a href="/docs/abi/encodePacked.html"><code>encodePacked</code></a></li><li><a href="/docs/abi/parseAbi.html"><code>parseAbi</code></a></li><li><a href="/docs/abi/parseAbiItem.html"><code>parseAbiItem</code></a></li><li><a href="/docs/abi/parseAbiParameter.html"><code>parseAbiParameter</code></a></li><li><a href="/docs/abi/parseAbiParameters.html"><code>parseAbiParameters</code></a></li></ul><h2 id="configuring-internal-types" tabindex="-1">Configuring Internal Types <a class="header-anchor" href="#configuring-internal-types" aria-label="Permalink to &quot;Configuring Internal Types&quot;">​</a></h2><p>For advanced use-cases, you may want to configure viem&#39;s internal types. Most of viem&#39;s types relating to ABIs and EIP-712 Typed Data are powered by <a href="https://abitype.dev" target="_blank" rel="noreferrer">ABIType</a>. See ABIType&#39;s <a href="https://abitype.dev/config.html" target="_blank" rel="noreferrer">documentation</a> for more info on how to configure types.</p><h2 id="window-polyfill" tabindex="-1"><code>window</code> Polyfill <a class="header-anchor" href="#window-polyfill" aria-label="Permalink to &quot;\`window\` Polyfill&quot;">​</a></h2><p>By importing the <code>viem/window</code> Polyfill, the global <code>window.ethereum</code> will typed as an <a href="https://github.com/wagmi-dev/viem/blob/4bdbf15be0d61b52a195e11c97201e707fb616cc/src/types/eip1193.ts#L24-L26" target="_blank" rel="noreferrer"><code>EIP1193Provider</code></a> (including a fully-typed <code>request</code> function &amp; typed events). It may be <code>undefined</code> in cases where no browser extension Wallet is detected, or if rendered on the server.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem/window&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> window </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">transaction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> window.ethereum.</span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">//      ^? const transaction: Transaction        </span></span>
<span class="line"><span style="color:#E1E4E8;">    method: </span><span style="color:#9ECBFF;">&#39;eth_getTransactionByHash&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#6A737D;">//  ^? (property) method: &quot;eth_blockNumber&quot; | &quot;eth_call&quot; | ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    params: [</span><span style="color:#9ECBFF;">&#39;0x...&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">//  ^? (property) params: [hash: Hash]</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem/window&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> window </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;undefined&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">transaction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> window.ethereum.</span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#6A737D;">//      ^? const transaction: Transaction        </span></span>
<span class="line"><span style="color:#24292E;">    method: </span><span style="color:#032F62;">&#39;eth_getTransactionByHash&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6A737D;">//  ^? (property) method: &quot;eth_blockNumber&quot; | &quot;eth_call&quot; | ...</span></span>
<span class="line"><span style="color:#24292E;">    params: [</span><span style="color:#032F62;">&#39;0x...&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">//  ^? (property) params: [hash: Hash]</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,31),o=[p];function t(c,r,i,E,y,d){return a(),n("div",null,o)}const b=s(e,[["render",t]]);export{h as __pageData,b as default};
