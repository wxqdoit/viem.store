import{_ as e,c as t,o as a,Q as r}from"./chunks/framework.a5052463.js";const i="/bench-bundlesize.svg",s="/bench-isaddress.svg",o="/bench-parseabi.svg",n="/bench-encodeabi.svg",u=JSON.parse('{"title":"为什么使用viem","description":"关于我们构建viem的概述.","frontmatter":{"head":[["meta",{"property":"og:title","content":"为什么使用viem"}],["meta",{"name":"description","content":"关于我们构建viem的概述."}],["meta",{"property":"og:description","content":"关于我们构建viem的概述."}]]},"headers":[],"relativePath":"docs/introduction.md","filePath":"docs/introduction.md"}'),m={name:"docs/introduction.md"},h=r('<h1 id="为什么使用viem" tabindex="-1">为什么使用viem <a class="header-anchor" href="#为什么使用viem" aria-label="Permalink to &quot;为什么使用viem&quot;">​</a></h1><h2 id="存在的问题" tabindex="-1">存在的问题 <a class="header-anchor" href="#存在的问题" aria-label="Permalink to &quot;存在的问题&quot;">​</a></h2><p>当前低级的以太坊接口抽象状态至少存在以下四个问题之一：<strong>开发者体验</strong>，<strong>稳定性</strong>，<strong>包的大小</strong>以及<strong>性能</strong> — 四个困境。</p><p>作为一个流行的React Hooks以太坊库<a href="https://wagmi.sh" target="_blank" rel="noreferrer">wagmi</a>的作者，我们很难将现在这些低级的TypeScript构建的以太坊库用以工作。我们希望提供给wagmi用户最好的开发体验，但是我们在构建wagmi时受到基础技术的限制。我们知道与全球最大的区块链系统交互需要一个始终稳定，可预测的实现，包体积很小且高性能的模块是非常重要的。</p><p>所以我们创建了<strong>viem</strong>: 一个与以太坊交互的低级无状态基本架构的TypeScript接口，着重于可靠性，高效率且具备出色开发体验的ethers.js和web3.js替代方案。</p><h2 id="开发人员体验" tabindex="-1">开发人员体验 <a class="header-anchor" href="#开发人员体验" aria-label="Permalink to &quot;开发人员体验&quot;">​</a></h2><p>viem通过模块化，可组合的APIs，完善的文档以及自动类型安全与推导提供出色的开发者体验。</p><p>它给用户提供十分方便的区块链构建方法来创建以太坊应用和库。尽管viem的APIs比其他库冗长，但我们相信这是让viem的模块化构建更加灵活的正确考虑。它更容易被移植，修改和删除，同时它允许开发者更好的理解以太坊的概念，以及理解传递某些属性的 <em>理由和目的</em>。总的来说，学习如何使用viem是一个非常好的方式去了解如何与以太坊交互。</p><p>我们的目标是为每一个viem的模块都提供完善的文档和用例。viem使用<a href="https://gist.github.com/zsup/9434452" target="_blank" rel="noreferrer">文档</a>和<a href="https://en.wikipedia.org/wiki/Test-driven_development#:~:text=Test%2Ddriven%20development%20(TDD),software%20against%20all%20test%20cases." target="_blank" rel="noreferrer">测试驱动</a>来构建模块，从而生成可预测且稳定的APIs。</p><p>viem也为用户提供<a href="/docs/typescript.html">健壮的类型化APIs</a>，允许用户通过<a href="https://twitter.com/awkweb/status/1555678944770367493" target="_blank" rel="noreferrer">自动完成</a>，<a href="https://twitter.com/jakemoxey/status/1570244174502588417?s=20" target="_blank" rel="noreferrer">类型接口</a>和静态验证来获得最流行的体验。</p><h2 id="稳定性" tabindex="-1">稳定性 <a class="header-anchor" href="#稳定性" aria-label="Permalink to &quot;稳定性&quot;">​</a></h2><p>稳定性是viem的基本原则。作为<a href="https://wagmi.sh" target="_blank" rel="noreferrer">wagmi</a>的作者，我们有许大大小小的组织都严重以来viem，并希望它对用户来说是完全稳定的。</p><p>viem通过实现下述的步骤来确保稳定性：</p><ul><li>我们针对以太坊的分叉节点做测试套件</li><li>我们旨在实现完整的测试覆盖并测试所有潜在的行为案例</li><li>我们创建确定以及干净的APIs</li></ul><h2 id="包大小" tabindex="-1">包大小 <a class="header-anchor" href="#包大小" aria-label="Permalink to &quot;包大小&quot;">​</a></h2><p>在开发网页应用时维护一个小体积的包的非常重要的。终端用户为了与以太坊交互不应该下载超过100kB的包。在很慢的3G网络上加载一个100kB的库至少需要<strong>两秒</strong>（加上与HTTP建立连接的时间）。</p><p>此外，viem是通tree-shaking缩减体积，意味着你看到的模块都包含在最后的包里面。</p><div class="h-4"></div><img src="'+i+'"><h2 id="高性能" tabindex="-1">高性能 <a class="header-anchor" href="#高性能" aria-label="Permalink to &quot;高性能&quot;">​</a></h2><p>此外上述提到的快速加载，viem通过仅在需要时才执行繁重的异步任务，以及优化编码/解码算法来进一步提升性能。下面是基准测试说明：</p><div class="m-auto mt-10 space-y-14 w-10/12"><img src="'+s+'"><img src="'+o+'"><img src="'+n+'"></div><h2 id="灵活性" tabindex="-1">灵活性 <a class="header-anchor" href="#灵活性" aria-label="Permalink to &quot;灵活性&quot;">​</a></h2><p>不像其他低级接口那样，用户没有自主性，viem允许用户自主选择且依然保持合理以及安全的默认设置。这些可以让用户创建他们自己想要的实现，就像<a href="https://wagmi.sh" target="_blank" rel="noreferrer">wagmi</a>一样，无需繁琐的解决办法就可以达到目的。</p><hr><p><strong>viem</strong>将通过类型安全和优秀的开发体验，从而帮助开发者以更高的准确性和正确性进行开发构建。它与<a href="https://wagmi.sh" target="_blank" rel="noreferrer">wagmi</a>集成的非常好，所以开发者无需在太多学习成本的情况下开始使用viem。</p>',26),c=[h];function l(p,d,g,_,v,f){return a(),t("div",null,c)}const k=e(m,[["render",l]]);export{u as __pageData,k as default};
