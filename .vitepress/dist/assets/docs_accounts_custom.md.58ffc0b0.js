import{_ as s,c as a,o as n,Q as p}from"./chunks/framework.0fcaa977.js";const F=JSON.parse('{"title":"Custom Account","description":"A function to create a Custom Account.","frontmatter":{"head":[["meta",{"property":"og:title","content":"Custom Account"}],["meta",{"name":"description","content":"A function to create a Custom Account."}],["meta",{"property":"og:description","content":"A function to create a Custom Account."}]]},"headers":[],"relativePath":"docs/accounts/custom.md","filePath":"docs/accounts/custom.md"}'),l={name:"docs/accounts/custom.md"},o=p(`<h1 id="custom-account" tabindex="-1">Custom Account <a class="header-anchor" href="#custom-account" aria-label="Permalink to &quot;Custom Account&quot;">​</a></h1><p>A Custom Account is an interface that has the ability to sign transactions and messages with your own custom implementation of the signable methods.</p><h2 id="import" tabindex="-1">Import <a class="header-anchor" href="#import" aria-label="Permalink to &quot;Import&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { toAccount } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem/accounts&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { toAccount } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem/accounts&#39;</span></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createWalletClient, http } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line has-focus"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  signMessage, </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  signTransaction, </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  signTypedData, </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  privateKeyToAddress,</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  toAccount </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem/accounts&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { mainnet } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem/chains&#39;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">privateKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0x...&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line has-focus"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">account</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toAccount</span><span style="color:#E1E4E8;">({</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  address: </span><span style="color:#B392F0;">getAddress</span><span style="color:#E1E4E8;">(privateKey),</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({ message, privateKey })</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">transaction</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">serializer</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">({ privateKey, transaction, serializer })</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">typedData</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">({ </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">typedData, privateKey })</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createWalletClient</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  account,</span></span>
<span class="line"><span style="color:#E1E4E8;">  chain: mainnet,</span></span>
<span class="line"><span style="color:#E1E4E8;">  transport: </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createWalletClient, http } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line has-focus"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {  </span></span>
<span class="line has-focus"><span style="color:#24292E;">  signMessage, </span></span>
<span class="line has-focus"><span style="color:#24292E;">  signTransaction, </span></span>
<span class="line has-focus"><span style="color:#24292E;">  signTypedData, </span></span>
<span class="line has-focus"><span style="color:#24292E;">  privateKeyToAddress,</span></span>
<span class="line has-focus"><span style="color:#24292E;">  toAccount </span></span>
<span class="line has-focus"><span style="color:#24292E;">} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem/accounts&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { mainnet } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem/chains&#39;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">privateKey</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0x...&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line has-focus"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">account</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toAccount</span><span style="color:#24292E;">({</span></span>
<span class="line has-focus"><span style="color:#24292E;">  address: </span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">(privateKey),</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">message</span><span style="color:#24292E;"> }) {</span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({ message, privateKey })</span></span>
<span class="line has-focus"><span style="color:#24292E;">  },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">(</span><span style="color:#E36209;">transaction</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">serializer</span><span style="color:#24292E;"> }) {</span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">({ privateKey, transaction, serializer })</span></span>
<span class="line has-focus"><span style="color:#24292E;">  },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">typedData</span><span style="color:#24292E;">) {</span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">({ </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">typedData, privateKey })</span></span>
<span class="line has-focus"><span style="color:#24292E;">  },</span></span>
<span class="line has-focus"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createWalletClient</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  account,</span></span>
<span class="line"><span style="color:#24292E;">  chain: mainnet,</span></span>
<span class="line"><span style="color:#24292E;">  transport: </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="address" tabindex="-1">address <a class="header-anchor" href="#address" aria-label="Permalink to &quot;address&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>Address</code></li></ul><p>The Address of the Account.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">account</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toAccount</span><span style="color:#E1E4E8;">({</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  address: </span><span style="color:#9ECBFF;">&#39;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({ message, privateKey })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">transaction</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">serializer</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">({ privateKey, transaction, serializer })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">typedData</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">({ </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">typedData, privateKey })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">account</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toAccount</span><span style="color:#24292E;">({</span></span>
<span class="line has-focus"><span style="color:#24292E;">  address: </span><span style="color:#032F62;">&#39;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">message</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({ message, privateKey })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">(</span><span style="color:#E36209;">transaction</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">serializer</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">({ privateKey, transaction, serializer })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">typedData</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">({ </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">typedData, privateKey })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="signmessage" tabindex="-1">signMessage <a class="header-anchor" href="#signmessage" aria-label="Permalink to &quot;signMessage&quot;">​</a></h3><p>Function to sign a message in <a href="https://eips.ethereum.org/EIPS/eip-191" target="_blank" rel="noreferrer">EIP-191 format</a>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">account</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toAccount</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  address: </span><span style="color:#9ECBFF;">&#39;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;"> }) { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({ message, privateKey })</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">transaction</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">serializer</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">({ privateKey, transaction, serializer })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">typedData</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">({ </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">typedData, privateKey })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">account</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toAccount</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  address: </span><span style="color:#032F62;">&#39;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">message</span><span style="color:#24292E;"> }) { </span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({ message, privateKey })</span></span>
<span class="line has-focus"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">(</span><span style="color:#E36209;">transaction</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">serializer</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">({ privateKey, transaction, serializer })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">typedData</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">({ </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">typedData, privateKey })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="signtransaction" tabindex="-1">signTransaction <a class="header-anchor" href="#signtransaction" aria-label="Permalink to &quot;signTransaction&quot;">​</a></h3><p>Function to sign a transaction.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">account</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toAccount</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  address: </span><span style="color:#9ECBFF;">&#39;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({ message, privateKey })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">transaction</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">serializer</span><span style="color:#E1E4E8;"> }) {  </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">({ privateKey, transaction, serializer })</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">typedData</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">({ </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">typedData, privateKey })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">account</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toAccount</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  address: </span><span style="color:#032F62;">&#39;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">message</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({ message, privateKey })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">(</span><span style="color:#E36209;">transaction</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">serializer</span><span style="color:#24292E;"> }) {  </span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">({ privateKey, transaction, serializer })</span></span>
<span class="line has-focus"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">typedData</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">({ </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">typedData, privateKey })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="signtypeddata" tabindex="-1">signTypedData <a class="header-anchor" href="#signtypeddata" aria-label="Permalink to &quot;signTypedData&quot;">​</a></h3><p>Function to sign <a href="https://eips.ethereum.org/EIPS/eip-712" target="_blank" rel="noreferrer">EIP-712</a> typed data.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">account</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toAccount</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  address: </span><span style="color:#9ECBFF;">&#39;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({ message, privateKey })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">transaction</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">serializer</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">({ privateKey, transaction, serializer })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">typedData</span><span style="color:#E1E4E8;">) {  </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTypedData</span><span style="color:#E1E4E8;">({ </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">typedData, privateKey })</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">account</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toAccount</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  address: </span><span style="color:#032F62;">&#39;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">message</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({ message, privateKey })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">(</span><span style="color:#E36209;">transaction</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">serializer</span><span style="color:#24292E;"> }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">({ privateKey, transaction, serializer })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">(</span><span style="color:#E36209;">typedData</span><span style="color:#24292E;">) {  </span></span>
<span class="line has-focus"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTypedData</span><span style="color:#24292E;">({ </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">typedData, privateKey })</span></span>
<span class="line has-focus"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div>`,20),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const g=s(l,[["render",c]]);export{F as __pageData,g as default};
