import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.0fcaa977.js";const f=JSON.parse('{"title":"Chains","description":"A list of chains to use with viem.","frontmatter":{"head":[["meta",{"property":"og:title","content":"Chains"}],["meta",{"name":"description","content":"A list of chains to use with viem."}],["meta",{"property":"og:description","content":"A list of chains to use with viem."}]]},"headers":[],"relativePath":"docs/clients/chains.md","filePath":"docs/clients/chains.md"}'),p={name:"docs/clients/chains.md"},o=l(`<h1 id="chains" tabindex="-1">Chains <a class="header-anchor" href="#chains" aria-label="Permalink to &quot;Chains&quot;">​</a></h1><p>The <code>viem/chains</code> entrypoint contains references to popular EVM-compatible chains such as: Polygon, Optimism, Avalanche, Base, Zora, and more.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>Import your chain from the entrypoint and use them in the consuming viem code:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createPublicClient, http } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line highlighted"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { zora } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem/chains&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPublicClient</span><span style="color:#E1E4E8;">({</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  chain: zora,</span></span>
<span class="line"><span style="color:#E1E4E8;">  transport: </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createPublicClient, http } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line highlighted"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { zora } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem/chains&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPublicClient</span><span style="color:#24292E;">({</span></span>
<span class="line highlighted"><span style="color:#24292E;">  chain: zora,</span></span>
<span class="line"><span style="color:#24292E;">  transport: </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><a href="https://github.com/wagmi-dev/viem/tree/main/src/chains/index.ts" target="_blank" rel="noreferrer">See here for a list of supported chains</a>.</p><blockquote><p>Want to add a chain that&#39;s not listed in viem? Read the <a href="https://github.com/wagmi-dev/viem/blob/main/.github/CONTRIBUTING.md#chains" target="_blank" rel="noreferrer">Contributing Guide</a>, and then open a Pull Request with your chain.</p></blockquote><h2 id="custom-chains" tabindex="-1">Custom Chains <a class="header-anchor" href="#custom-chains" aria-label="Permalink to &quot;Custom Chains&quot;">​</a></h2><p>You can also extend viem to support other EVM-compatible chains by building your own chain object that inherits the <code>Chain</code> type.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineChain } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">zora</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineChain</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  id: </span><span style="color:#79B8FF;">7777777</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;Zora&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  network: </span><span style="color:#9ECBFF;">&#39;zora&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  nativeCurrency: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    decimals: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;Ether&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    symbol: </span><span style="color:#9ECBFF;">&#39;ETH&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpcUrls: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    default: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      http: [</span><span style="color:#9ECBFF;">&#39;https://rpc.zora.energy&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      webSocket: [</span><span style="color:#9ECBFF;">&#39;wss://rpc.zora.energy&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    public: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      http: [</span><span style="color:#9ECBFF;">&#39;https://rpc.zora.energy&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      webSocket: [</span><span style="color:#9ECBFF;">&#39;wss://rpc.zora.energy&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  blockExplorers: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    default: { name: </span><span style="color:#9ECBFF;">&#39;Explorer&#39;</span><span style="color:#E1E4E8;">, url: </span><span style="color:#9ECBFF;">&#39;https://explorer.zora.energy&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  contracts: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    multicall3: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      address: </span><span style="color:#9ECBFF;">&#39;0xcA11bde05977b3631167028862bE2a173976CA11&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      blockCreated: </span><span style="color:#79B8FF;">5882</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineChain } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">zora</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineChain</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  id: </span><span style="color:#005CC5;">7777777</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;Zora&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  network: </span><span style="color:#032F62;">&#39;zora&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  nativeCurrency: {</span></span>
<span class="line"><span style="color:#24292E;">    decimals: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;Ether&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    symbol: </span><span style="color:#032F62;">&#39;ETH&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  rpcUrls: {</span></span>
<span class="line"><span style="color:#24292E;">    default: {</span></span>
<span class="line"><span style="color:#24292E;">      http: [</span><span style="color:#032F62;">&#39;https://rpc.zora.energy&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      webSocket: [</span><span style="color:#032F62;">&#39;wss://rpc.zora.energy&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    public: {</span></span>
<span class="line"><span style="color:#24292E;">      http: [</span><span style="color:#032F62;">&#39;https://rpc.zora.energy&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      webSocket: [</span><span style="color:#032F62;">&#39;wss://rpc.zora.energy&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  blockExplorers: {</span></span>
<span class="line"><span style="color:#24292E;">    default: { name: </span><span style="color:#032F62;">&#39;Explorer&#39;</span><span style="color:#24292E;">, url: </span><span style="color:#032F62;">&#39;https://explorer.zora.energy&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  contracts: {</span></span>
<span class="line"><span style="color:#24292E;">    multicall3: {</span></span>
<span class="line"><span style="color:#24292E;">      address: </span><span style="color:#032F62;">&#39;0xcA11bde05977b3631167028862bE2a173976CA11&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      blockCreated: </span><span style="color:#005CC5;">5882</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="chain-configuration" tabindex="-1">Chain Configuration <a class="header-anchor" href="#chain-configuration" aria-label="Permalink to &quot;Chain Configuration&quot;">​</a></h2><p>You can optionally pass a second parameter to <code>defineChain</code> to set configuration such as: fees, formatters, and transaction serializers.</p><h3 id="fees" tabindex="-1">Fees <a class="header-anchor" href="#fees" aria-label="Permalink to &quot;Fees&quot;">​</a></h3><p>You can modify how fees are derived by using the <code>fees</code> property on the Chain.</p><h4 id="fees-basefeemultiplier" tabindex="-1"><code>fees.baseFeeMultiplier</code> <a class="header-anchor" href="#fees-basefeemultiplier" aria-label="Permalink to &quot;\`fees.baseFeeMultiplier\`&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>number</code></li><li><strong>Default</strong>: <code>1.2</code></li></ul><p>The fee multiplier to use to account for fee fluctuations. Used in the <a href="/docs/actions/public/estimateFeesPerGas.html"><code>estimateFeesPerGas</code> Action</a> against the latest block&#39;s base fee per gas to derive a final <code>maxFeePerGas</code> (EIP-1193), or gas price to derive a final <code>gasPrice</code> (Legacy).</p><p><strong>Parameters</strong></p><ul><li><code>block</code>: The latest block.</li><li><code>client</code>: The Client instance.</li><li><code>request</code>: The transaction request (if exists).</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineChain } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">example</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineChain</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    fees: {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      baseFeeMultiplier: </span><span style="color:#79B8FF;">1.2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// or</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">baseFeeMultiplier</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">block</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// some async work</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineChain } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">example</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineChain</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  { </span></span>
<span class="line has-focus"><span style="color:#24292E;">    fees: {</span></span>
<span class="line has-focus"><span style="color:#24292E;">      baseFeeMultiplier: </span><span style="color:#005CC5;">1.2</span><span style="color:#24292E;">,</span></span>
<span class="line has-focus"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// or</span></span>
<span class="line has-focus"><span style="color:#24292E;">      </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">baseFeeMultiplier</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">block</span><span style="color:#24292E;">, </span><span style="color:#E36209;">request</span><span style="color:#24292E;"> }) {</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// some async work</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line has-focus"><span style="color:#24292E;">      }</span></span>
<span class="line has-focus"><span style="color:#24292E;">    }</span></span>
<span class="line has-focus"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="fees-defaultpriorityfee" tabindex="-1"><code>fees.defaultPriorityFee</code> <a class="header-anchor" href="#fees-defaultpriorityfee" aria-label="Permalink to &quot;\`fees.defaultPriorityFee\`&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>number | ((args: FeesFnParameters) =&gt; Promise&lt;bigint&gt; | bigint)</code></li></ul><p>The default <code>maxPriorityFeePerGas</code> to use when a priority fee is not defined upon sending a transaction.</p><p>Also overrides the return value in the <a href="/docs/actions/public/estimateMaxPriorityFeePerGas.html"><code>estimateMaxPriorityFeePerGas</code> Action</a> and <code>maxPriorityFeePerGas</code> value in <a href="/docs/actions/public/estimateFeesPerGas.html"><code>estimateFeesPerGas</code></a>.</p><p><strong>Parameters</strong></p><ul><li><code>block</code>: The latest block.</li><li><code>client</code>: The Client instance.</li><li><code>request</code>: The transaction request (if exists).</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineChain } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">example</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineChain</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    fees: {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      defaultPriorityFee: </span><span style="color:#B392F0;">parseGwei</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0.01&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// or</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defaultPriorityFee</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">block</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// some async work</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineChain } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">example</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineChain</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  { </span></span>
<span class="line has-focus"><span style="color:#24292E;">    fees: {</span></span>
<span class="line has-focus"><span style="color:#24292E;">      defaultPriorityFee: </span><span style="color:#6F42C1;">parseGwei</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;0.01&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line has-focus"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// or</span></span>
<span class="line has-focus"><span style="color:#24292E;">      </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defaultPriorityFee</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">block</span><span style="color:#24292E;">, </span><span style="color:#E36209;">request</span><span style="color:#24292E;"> }) {</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// some async work</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line has-focus"><span style="color:#24292E;">      }</span></span>
<span class="line has-focus"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="fees-estimatefeespergas" tabindex="-1"><code>fees.estimateFeesPerGas</code> <a class="header-anchor" href="#fees-estimatefeespergas" aria-label="Permalink to &quot;\`fees.estimateFeesPerGas\`&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>(args: FeesFnParameters) =&gt; Promise&lt;EstimateFeesPerGasResponse&gt;</code></li></ul><p>Allows customization of fee per gas values (ie. <code>maxFeePerGas</code>, <code>maxPriorityFeePerGas</code>, <code>gasPrice</code>).</p><p>Also overrides the return value in <a href="/docs/actions/public/estimateFeesPerGas.html"><code>estimateFeesPerGas</code></a>.</p><p><strong>Parameters</strong></p><ul><li><code>block</code>: The latest block.</li><li><code>client</code>: The Client instance.</li><li><code>multiply</code>: A function to apply the <code>baseFeeMultiplier</code> to the provided value.</li><li><code>request</code>: The transaction request (if exists).</li><li><code>type</code>: The transaction type (ie. <code>legacy</code> or <code>eip1559</code>).</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineChain } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">example</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineChain</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    fees: {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">estimateFeesPerGas</span><span style="color:#E1E4E8;">({ </span><span style="color:#FFAB70;">client</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">multiply</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">gasPrice</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">baseFeePerGas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">maxPriorityFeePerGas</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;legacy&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { gasPrice: </span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(gasPrice) }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          maxFeePerGas: </span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(baseFeePerGas) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> maxPriorityFeePerGas,</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          maxPriorityFeePerGas</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineChain } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">example</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineChain</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  { </span></span>
<span class="line has-focus"><span style="color:#24292E;">    fees: {</span></span>
<span class="line has-focus"><span style="color:#24292E;">      </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">estimateFeesPerGas</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">client</span><span style="color:#24292E;">, </span><span style="color:#E36209;">multiply</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#24292E;"> }) {</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">gasPrice</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">baseFeePerGas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">maxPriorityFeePerGas</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// ...</span></span>
<span class="line has-focus"></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;legacy&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { gasPrice: </span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(gasPrice) }</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">          maxFeePerGas: </span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(baseFeePerGas) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> maxPriorityFeePerGas,</span></span>
<span class="line has-focus"><span style="color:#24292E;">          maxPriorityFeePerGas</span></span>
<span class="line has-focus"><span style="color:#24292E;">        }</span></span>
<span class="line has-focus"><span style="color:#24292E;">      }</span></span>
<span class="line has-focus"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="formatters" tabindex="-1">Formatters <a class="header-anchor" href="#formatters" aria-label="Permalink to &quot;Formatters&quot;">​</a></h3><p>You can modify how Blocks &amp; Transactions are formatted by using the <code>formatters</code> property on the Chain.</p><p>This is useful for chains that have a different Block or Transaction structure than Mainnet (e.g. Celo &amp; OP Stack chains).</p><h4 id="formatters-block" tabindex="-1"><code>formatters.block</code> <a class="header-anchor" href="#formatters-block" aria-label="Permalink to &quot;\`formatters.block\`&quot;">​</a></h4><p>You can modify how Blocks are formatted by using the <code>formatters.block</code> property on the Chain.</p><p>You can either pass in the Block overrides, or the whole Block itself to the <code>format</code> function of <code>defineBlock</code>. You can also exclude certain properties with <code>exclude</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines has-diff vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineBlock, defineChain, hexToBigInt } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcBlockOverrides</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">secondaryFee</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">}</span></span>
<span class="line has-focus"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BlockOverrides</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">secondaryFee</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bigint</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">example</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineChain</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    formatters: {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      block: </span><span style="color:#B392F0;">defineBlock</span><span style="color:#E1E4E8;">({</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        exclude: [</span><span style="color:#9ECBFF;">&#39;difficulty&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcBlockOverrides</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BlockOverrides</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">            secondaryFee: </span><span style="color:#B392F0;">hexToBigInt</span><span style="color:#E1E4E8;">(args.secondaryFee)</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      })</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">block</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getBlock</span><span style="color:#E1E4E8;">() </span></span>
<span class="line has-focus"><span style="color:#6A737D;">//    ^? { ..., difficulty: never, secondaryFee: bigint, ... }</span></span></code></pre><pre class="shiki github-light has-focused-lines has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineBlock, defineChain, hexToBigInt } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcBlockOverrides</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#E36209;">secondaryFee</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span></span>
<span class="line has-focus"><span style="color:#24292E;">}</span></span>
<span class="line has-focus"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BlockOverrides</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#E36209;">secondaryFee</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bigint</span></span>
<span class="line has-focus"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">example</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineChain</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  { </span></span>
<span class="line has-focus"><span style="color:#24292E;">    formatters: {</span></span>
<span class="line has-focus"><span style="color:#24292E;">      block: </span><span style="color:#6F42C1;">defineBlock</span><span style="color:#24292E;">({</span></span>
<span class="line has-focus"><span style="color:#24292E;">        exclude: [</span><span style="color:#032F62;">&#39;difficulty&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcBlockOverrides</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BlockOverrides</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">            secondaryFee: </span><span style="color:#6F42C1;">hexToBigInt</span><span style="color:#24292E;">(args.secondaryFee)</span></span>
<span class="line has-focus"><span style="color:#24292E;">          }</span></span>
<span class="line has-focus"><span style="color:#24292E;">        }</span></span>
<span class="line has-focus"><span style="color:#24292E;">      })</span></span>
<span class="line has-focus"><span style="color:#24292E;">    }</span></span>
<span class="line has-focus"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">block</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getBlock</span><span style="color:#24292E;">() </span></span>
<span class="line has-focus"><span style="color:#6A737D;">//    ^? { ..., difficulty: never, secondaryFee: bigint, ... }</span></span></code></pre></div><h4 id="formatters-transaction" tabindex="-1"><code>formatters.transaction</code> <a class="header-anchor" href="#formatters-transaction" aria-label="Permalink to &quot;\`formatters.transaction\`&quot;">​</a></h4><p>You can modify how Transactions are formatted by using the <code>formatters.transaction</code> property on the Chain.</p><p>You can either pass in the Transaction overrides, or the whole Transaction itself to the <code>format</code> function of <code>defineTransaction</code>. You can also exclude certain properties with <code>exclude</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineTransaction, defineChain, hexToBigInt } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcTransactionOverrides</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">mint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">}</span></span>
<span class="line has-focus"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionOverrides</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">mint</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bigint</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">example</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineChain</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    formatters: {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      transaction: </span><span style="color:#B392F0;">defineTransaction</span><span style="color:#E1E4E8;">({</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        exclude: [</span><span style="color:#9ECBFF;">&#39;gasPrice&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcTransactionOverrides</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionOverrides</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">            mint: </span><span style="color:#B392F0;">hexToBigInt</span><span style="color:#E1E4E8;">(args.mint)</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      })</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">transaction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getTransaction</span><span style="color:#E1E4E8;">({ hash: </span><span style="color:#9ECBFF;">&#39;0x...&#39;</span><span style="color:#E1E4E8;"> }) </span></span>
<span class="line has-focus"><span style="color:#6A737D;">//    ^? { ..., gasPrice: never, mint: bigint, ... }</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineTransaction, defineChain, hexToBigInt } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcTransactionOverrides</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#E36209;">mint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span></span>
<span class="line has-focus"><span style="color:#24292E;">}</span></span>
<span class="line has-focus"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionOverrides</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#E36209;">mint</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bigint</span></span>
<span class="line has-focus"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">example</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineChain</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  { </span></span>
<span class="line has-focus"><span style="color:#24292E;">    formatters: {</span></span>
<span class="line has-focus"><span style="color:#24292E;">      transaction: </span><span style="color:#6F42C1;">defineTransaction</span><span style="color:#24292E;">({</span></span>
<span class="line has-focus"><span style="color:#24292E;">        exclude: [</span><span style="color:#032F62;">&#39;gasPrice&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcTransactionOverrides</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionOverrides</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">            mint: </span><span style="color:#6F42C1;">hexToBigInt</span><span style="color:#24292E;">(args.mint)</span></span>
<span class="line has-focus"><span style="color:#24292E;">          }</span></span>
<span class="line has-focus"><span style="color:#24292E;">        }</span></span>
<span class="line has-focus"><span style="color:#24292E;">      })</span></span>
<span class="line has-focus"><span style="color:#24292E;">    }</span></span>
<span class="line has-focus"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">transaction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getTransaction</span><span style="color:#24292E;">({ hash: </span><span style="color:#032F62;">&#39;0x...&#39;</span><span style="color:#24292E;"> }) </span></span>
<span class="line has-focus"><span style="color:#6A737D;">//    ^? { ..., gasPrice: never, mint: bigint, ... }</span></span></code></pre></div><h4 id="formatters-transactionreceipt" tabindex="-1"><code>formatters.transactionReceipt</code> <a class="header-anchor" href="#formatters-transactionreceipt" aria-label="Permalink to &quot;\`formatters.transactionReceipt\`&quot;">​</a></h4><p>You can modify how Transaction Receipts are formatted by using the <code>formatters.transactionReceipt</code> property on the Chain.</p><p>You can either pass in the Transaction Receipt overrides, or the whole Transaction Receipt itself to the <code>format</code> function of <code>defineTransactionReceipt</code>. You can also exclude certain properties with <code>exclude</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineTransactionReceipt, defineChain, hexToBigInt } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcTransactionReceiptOverrides</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">l1Fee</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">}</span></span>
<span class="line has-focus"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionReceiptOverrides</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">l1Fee</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bigint</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">example</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineChain</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    formatters: {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      transactionReceipt: </span><span style="color:#B392F0;">defineTransactionReceipt</span><span style="color:#E1E4E8;">({</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        exclude: [</span><span style="color:#9ECBFF;">&#39;effectiveGasPrice&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcTransactionReceiptOverrides</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">TransactionReceiptOverrides</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">            l1Fee: </span><span style="color:#B392F0;">hexToBigInt</span><span style="color:#E1E4E8;">(args.l1Fee)</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      })</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">receipt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getTransactionReceipt</span><span style="color:#E1E4E8;">({ hash: </span><span style="color:#9ECBFF;">&#39;0x...&#39;</span><span style="color:#E1E4E8;"> }) </span></span>
<span class="line has-focus"><span style="color:#6A737D;">//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineTransactionReceipt, defineChain, hexToBigInt } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcTransactionReceiptOverrides</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#E36209;">l1Fee</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span></span>
<span class="line has-focus"><span style="color:#24292E;">}</span></span>
<span class="line has-focus"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionReceiptOverrides</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#E36209;">l1Fee</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bigint</span></span>
<span class="line has-focus"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">example</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineChain</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  { </span></span>
<span class="line has-focus"><span style="color:#24292E;">    formatters: {</span></span>
<span class="line has-focus"><span style="color:#24292E;">      transactionReceipt: </span><span style="color:#6F42C1;">defineTransactionReceipt</span><span style="color:#24292E;">({</span></span>
<span class="line has-focus"><span style="color:#24292E;">        exclude: [</span><span style="color:#032F62;">&#39;effectiveGasPrice&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcTransactionReceiptOverrides</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">TransactionReceiptOverrides</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">            l1Fee: </span><span style="color:#6F42C1;">hexToBigInt</span><span style="color:#24292E;">(args.l1Fee)</span></span>
<span class="line has-focus"><span style="color:#24292E;">          }</span></span>
<span class="line has-focus"><span style="color:#24292E;">        }</span></span>
<span class="line has-focus"><span style="color:#24292E;">      })</span></span>
<span class="line has-focus"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">receipt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getTransactionReceipt</span><span style="color:#24292E;">({ hash: </span><span style="color:#032F62;">&#39;0x...&#39;</span><span style="color:#24292E;"> }) </span></span>
<span class="line has-focus"><span style="color:#6A737D;">//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }</span></span></code></pre></div><h4 id="formatters-transactionrequest" tabindex="-1"><code>formatters.transactionRequest</code> <a class="header-anchor" href="#formatters-transactionrequest" aria-label="Permalink to &quot;\`formatters.transactionRequest\`&quot;">​</a></h4><p>You can modify how Transaction Requests are formatted by using the <code>formatters.transactionRequest</code> property on the Chain.</p><p>You can either pass in the Transaction Request overrides, or the whole Transaction Request itself to the <code>format</code> function of <code>defineTransactionRequest</code>. You can also exclude certain properties with <code>exclude</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineTransactionRequest, defineChain, hexToBigInt } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RpcTransactionRequestOverrides</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">secondaryFee</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`0x\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">}</span></span>
<span class="line has-focus"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionRequestOverrides</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">secondaryFee</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bigint</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">example</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineChain</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    formatters: {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      transactionRequest: </span><span style="color:#B392F0;">defineTransactionRequest</span><span style="color:#E1E4E8;">({</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        exclude: [</span><span style="color:#9ECBFF;">&#39;effectiveGasPrice&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TransactionRequestOverrides</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">RpcTransactionRequestOverrides</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">            secondaryFee: </span><span style="color:#B392F0;">numberToHex</span><span style="color:#E1E4E8;">(args.secondaryFee)</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">          }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      })</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">receipt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getTransactionReceipt</span><span style="color:#E1E4E8;">({ hash: </span><span style="color:#9ECBFF;">&#39;0x...&#39;</span><span style="color:#E1E4E8;"> }) </span></span>
<span class="line has-focus"><span style="color:#6A737D;">//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineTransactionRequest, defineChain, hexToBigInt } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RpcTransactionRequestOverrides</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#E36209;">secondaryFee</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`0x\${</span><span style="color:#005CC5;">string</span><span style="color:#032F62;">}\`</span></span>
<span class="line has-focus"><span style="color:#24292E;">}</span></span>
<span class="line has-focus"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionRequestOverrides</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">  </span><span style="color:#E36209;">secondaryFee</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bigint</span></span>
<span class="line has-focus"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">example</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineChain</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  { </span></span>
<span class="line has-focus"><span style="color:#24292E;">    formatters: {</span></span>
<span class="line has-focus"><span style="color:#24292E;">      transactionRequest: </span><span style="color:#6F42C1;">defineTransactionRequest</span><span style="color:#24292E;">({</span></span>
<span class="line has-focus"><span style="color:#24292E;">        exclude: [</span><span style="color:#032F62;">&#39;effectiveGasPrice&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionRequestOverrides</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">RpcTransactionRequestOverrides</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line has-focus"><span style="color:#24292E;">            secondaryFee: </span><span style="color:#6F42C1;">numberToHex</span><span style="color:#24292E;">(args.secondaryFee)</span></span>
<span class="line has-focus"><span style="color:#24292E;">          }</span></span>
<span class="line has-focus"><span style="color:#24292E;">        }</span></span>
<span class="line has-focus"><span style="color:#24292E;">      })</span></span>
<span class="line has-focus"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">receipt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getTransactionReceipt</span><span style="color:#24292E;">({ hash: </span><span style="color:#032F62;">&#39;0x...&#39;</span><span style="color:#24292E;"> }) </span></span>
<span class="line has-focus"><span style="color:#6A737D;">//    ^? { ..., effectiveGasPrice: never, l1Fee: bigint, ... }</span></span></code></pre></div><h3 id="serializers" tabindex="-1">Serializers <a class="header-anchor" href="#serializers" aria-label="Permalink to &quot;Serializers&quot;">​</a></h3><h4 id="serializers-transaction" tabindex="-1"><code>serializers.transaction</code> <a class="header-anchor" href="#serializers-transaction" aria-label="Permalink to &quot;\`serializers.transaction\`&quot;">​</a></h4><ul><li><strong>Type</strong>: <code>(transaction: Transaction, signature?: Signature) =&gt; &quot;0x\${string}&quot;</code></li></ul><p>You can modify how Transactions are serialized by using the <code>serializers.transaction</code> property on the Chain.</p><p><strong>Parameters</strong></p><ul><li><code>transaction</code>: The transaction to serialize.</li><li><code>signature</code>: The transaction signature (if exists).</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineChain, serializeTransaction } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">example</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineChain</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  { </span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    serializers: {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">transaction</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">signature</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serializeTransaction</span><span style="color:#E1E4E8;">(transaction, signature)</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">      }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">    }</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineChain, serializeTransaction } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">example</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineChain</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> },</span></span>
<span class="line has-focus"><span style="color:#24292E;">  { </span></span>
<span class="line has-focus"><span style="color:#24292E;">    serializers: {</span></span>
<span class="line has-focus"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">(</span><span style="color:#E36209;">transaction</span><span style="color:#24292E;">, </span><span style="color:#E36209;">signature</span><span style="color:#24292E;">) {</span></span>
<span class="line has-focus"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serializeTransaction</span><span style="color:#24292E;">(transaction, signature)</span></span>
<span class="line has-focus"><span style="color:#24292E;">      }</span></span>
<span class="line has-focus"><span style="color:#24292E;">    }</span></span>
<span class="line has-focus"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div>`,60),e=[o];function c(t,r,E,i,y,h){return n(),a("div",null,e)}const d=s(p,[["render",c]]);export{f as __pageData,d as default};
