import{_ as s,c as n,o as a,Q as o}from"./chunks/framework.0fcaa977.js";const m=JSON.parse('{"title":"Error Handling","description":"Error handling in viem.","frontmatter":{"head":[["meta",{"property":"og:title","content":"Error Handling"}],["meta",{"name":"description","content":"Error handling in viem."}],["meta",{"property":"og:description","content":"Error handling in viem."}]]},"headers":[],"relativePath":"docs/error-handling.md","filePath":"docs/error-handling.md"}'),p={name:"docs/error-handling.md"},l=o(`<h1 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">â€‹</a></h1><p>Every module in viem exports an accompanying error type which you can use to strongly type your <code>catch</code> statements.</p><p>These types come in the form of <code>&lt;Module&gt;ErrorType</code>. For example, the <code>getBlockNumber</code> action exports a <code>GetBlockNumberErrorType</code> type.</p><p>Unfortunately, <a href="https://github.com/microsoft/TypeScript/issues/13219" target="_blank" rel="noreferrer">TypeScript doesn&#39;t have an abstraction for typed exceptions</a>, so the most pragmatic &amp; vanilla approach would be to explicitly cast error types in the <code>catch</code> statement.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-TrSrO" id="tab-Zj8Hezm" checked="checked"><label for="tab-Zj8Hezm">example.ts</label><input type="radio" name="group-TrSrO" id="tab-AybWcBu"><label for="tab-AybWcBu">client.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line highlighted"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> GetBlockNumberErrorType } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { publicClient } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">blockNumber</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">getBlockNumber</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetBlockNumberErrorType</span></span>
<span class="line"><span style="color:#E1E4E8;">  error.name</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//    ^? (property) name: &quot;Error&quot; | &quot;ChainDisconnectedError&quot; | &quot;HttpRequestError&quot; | &quot;InternalRpcError&quot; | &quot;InvalidInputRpcError&quot; | &quot;InvalidParamsRpcError&quot; | &quot;InvalidRequestRpcError&quot; | &quot;JsonRpcVersionUnsupportedError&quot; | ... 16 more ... | &quot;WebSocketRequestError&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (error.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;InternalRpcError&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    error.code</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    ^? (property) code: -32603</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (error.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;HttpRequestError&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    error.headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    ^? (property) headers: Headers</span></span>
<span class="line"><span style="color:#E1E4E8;">    error.status</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//    ^? (property) status: number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line highlighted"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> GetBlockNumberErrorType } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { publicClient } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">blockNumber</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getBlockNumber</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetBlockNumberErrorType</span></span>
<span class="line"><span style="color:#24292E;">  error.name</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//    ^? (property) name: &quot;Error&quot; | &quot;ChainDisconnectedError&quot; | &quot;HttpRequestError&quot; | &quot;InternalRpcError&quot; | &quot;InvalidInputRpcError&quot; | &quot;InvalidParamsRpcError&quot; | &quot;InvalidRequestRpcError&quot; | &quot;JsonRpcVersionUnsupportedError&quot; | ... 16 more ... | &quot;WebSocketRequestError&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (error.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;InternalRpcError&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    error.code</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    ^? (property) code: -32603</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (error.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;HttpRequestError&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    error.headers</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    ^? (property) headers: Headers</span></span>
<span class="line"><span style="color:#24292E;">    error.status</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    ^? (property) status: number</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createPublicClient, http } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { mainnet } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem/chains&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">publicClient</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPublicClient</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  chain: mainnet,</span></span>
<span class="line"><span style="color:#E1E4E8;">  transport: </span><span style="color:#B392F0;">http</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createPublicClient, http } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { mainnet } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem/chains&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">publicClient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPublicClient</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  chain: mainnet,</span></span>
<span class="line"><span style="color:#24292E;">  transport: </span><span style="color:#6F42C1;">http</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div></div></div>`,5),e=[l];function r(t,c,E,i,y,d){return a(),n("div",null,e)}const h=s(p,[["render",r]]);export{m as __pageData,h as default};
