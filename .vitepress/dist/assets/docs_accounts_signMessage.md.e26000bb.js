import{_ as s,c as a,o as e,Q as n}from"./chunks/framework.a5052463.js";const u=JSON.parse(`{"title":"signMessage (Local Account)","description":"Signs a message with the Account's private key.","frontmatter":{"head":[["meta",{"property":"og:title","content":"signMessage (Local Account)"}],["meta",{"name":"description","content":"Signs a message with the Account's private key."}],["meta",{"property":"og:description","content":"Signs a message with the Account's private key."}]]},"headers":[],"relativePath":"docs/accounts/signMessage.md","filePath":"docs/accounts/signMessage.md"}`),o={name:"docs/accounts/signMessage.md"},l=n(`<h1 id="signmessage-local-account" tabindex="-1">signMessage (Local Account) <a class="header-anchor" href="#signmessage-local-account" aria-label="Permalink to &quot;signMessage (Local Account)&quot;">​</a></h1><p>Calculates an Ethereum-specific signature in <a href="https://eips.ethereum.org/EIPS/eip-191" target="_blank" rel="noreferrer">EIP-191 format</a>: <code>keccak256(&quot;\\x19Ethereum Signed Message:\\n&quot; + len(message) + message))</code>.</p><p>With the calculated signature, you can:</p><ul><li>use <a href="/docs/utilities/verifyMessage.html"><code>verifyMessage</code></a> to verify the signature,</li><li>use <a href="/docs/utilities/recoverMessageAddress.html"><code>recoverMessageAddress</code></a> to recover the signing address from a signature.</li></ul><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { privateKeyToAccount } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;viem/accounts&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">account</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">privateKeyToAccount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0x...&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">signature</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> account.</span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Hex data representation of message.</span></span>
<span class="line"><span style="color:#E1E4E8;">  message: { raw: </span><span style="color:#9ECBFF;">&#39;0x68656c6c6f20776f726c64&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;0xa461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { privateKeyToAccount } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;viem/accounts&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">account</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">privateKeyToAccount</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;0x...&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">signature</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> account.</span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Hex data representation of message.</span></span>
<span class="line"><span style="color:#24292E;">  message: { raw: </span><span style="color:#032F62;">&#39;0x68656c6c6f20776f726c64&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;0xa461f509887bd19e312c0c58467ce8ff8e300d3c1a90b608a760c5b80318eaf15fe57c96f9175d6cd4daad4663763baa7e78836e067d0163e9a2ccf2ff753f5b1b&quot;</span></span></code></pre></div><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="/docs/glossary/types.html#hex"><code>Hex</code></a></p><p>The signed message.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><h3 id="message" tabindex="-1">message <a class="header-anchor" href="#message" aria-label="Permalink to &quot;message&quot;">​</a></h3><ul><li><strong>Type:</strong> <code>string | { raw: Hex | ByteArray }</code></li></ul><p>Message to sign.</p><p>By default, viem signs the UTF-8 representation of the message.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">signature</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> account.</span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  message: </span><span style="color:#9ECBFF;">&#39;hello world&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">signature</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> account.</span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({</span></span>
<span class="line has-focus"><span style="color:#24292E;">  message: </span><span style="color:#032F62;">&#39;hello world&#39;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>To sign the data representation of the message, you can use the <code>raw</code> attribute.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-focused-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">signature</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> account.</span><span style="color:#B392F0;">signMessage</span><span style="color:#E1E4E8;">({</span></span>
<span class="line has-focus"><span style="color:#E1E4E8;">  message: { raw: </span><span style="color:#9ECBFF;">&#39;0x68656c6c6f20776f726c64&#39;</span><span style="color:#E1E4E8;"> }, </span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light has-focused-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">signature</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> account.</span><span style="color:#6F42C1;">signMessage</span><span style="color:#24292E;">({</span></span>
<span class="line has-focus"><span style="color:#24292E;">  message: { raw: </span><span style="color:#032F62;">&#39;0x68656c6c6f20776f726c64&#39;</span><span style="color:#24292E;"> }, </span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div>`,17),p=[l];function t(c,r,i,y,E,d){return e(),a("div",null,p)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
